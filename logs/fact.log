=== STACK ===
#2: NSc main[]
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NSc main[]
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
=============

=== STACK ===
#2: NAp #1 #27
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #1 #27
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
=============

=== STACK ===
#1: NSc fac["n"]
#2: NAp #1 #27
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #1 #27
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
=============

=== STACK ===
#2: NAp #33 #39
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NAp #28 #29
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#33: NAp #31 #32
#2: NAp #33 #39
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NAp #28 #29
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#31: NAp #20 #30
#33: NAp #31 #32
#2: NAp #33 #39
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NAp #28 #29
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#20: NPrim if
#31: NAp #20 #30
#33: NAp #31 #32
#2: NAp #33 #39
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NAp #28 #29
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#30: NAp #28 #29
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NAp #28 #29
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#28: NAp #25 #27
#30: NAp #28 #29
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NAp #28 #29
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#25: NPrim ==
#28: NAp #25 #27
#30: NAp #28 #29
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NAp #28 #29
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#30: NData 1, []
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#31: NAp #20 #30
#33: NAp #31 #32
#2: NAp #33 #39
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#20: NPrim if
#31: NAp #20 #30
#33: NAp #31 #32
#2: NAp #33 #39
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NAp #33 #39
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#2: NInd (NAp #34 #38)
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#39: NAp #34 #38
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#34: NAp #18 #27
#39: NAp #34 #38
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#18: NPrim *
#34: NAp #18 #27
#39: NAp #34 #38
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#38: NAp #1 #37
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#1: NSc fac["n"]
#38: NAp #1 #37
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #1 #37
#39: NAp #34 #38
=============

=== STACK ===
#38: NAp #45 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#45: NAp #43 #44
#38: NAp #45 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#43: NAp #20 #42
#45: NAp #43 #44
#38: NAp #45 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#20: NPrim if
#43: NAp #20 #42
#45: NAp #43 #44
#38: NAp #45 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#42: NAp #40 #41
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#40: NAp #25 #37
#42: NAp #40 #41
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#25: NPrim ==
#40: NAp #25 #37
#42: NAp #40 #41
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#37: NAp #35 #36
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#35: NAp #17 #27
#37: NAp #35 #36
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#17: NPrim -
#35: NAp #17 #27
#37: NAp #35 #36
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NAp #35 #36
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#37: NNum 4
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#40: NAp #25 #37
#42: NAp #40 #41
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#25: NPrim ==
#40: NAp #25 #37
#42: NAp #40 #41
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NAp #40 #41
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#42: NData 1, []
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#43: NAp #20 #42
#45: NAp #43 #44
#38: NAp #45 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#20: NPrim if
#43: NAp #20 #42
#45: NAp #43 #44
#38: NAp #45 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NAp #45 #51
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#38: NInd (NAp #46 #50)
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#51: NAp #46 #50
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#46: NAp #18 #37
#51: NAp #46 #50
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#18: NPrim *
#46: NAp #18 #37
#51: NAp #46 #50
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#50: NAp #1 #49
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#1: NSc fac["n"]
#50: NAp #1 #49
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #1 #49
#51: NAp #46 #50
=============

=== STACK ===
#50: NAp #57 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#57: NAp #55 #56
#50: NAp #57 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#55: NAp #20 #54
#57: NAp #55 #56
#50: NAp #57 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#20: NPrim if
#55: NAp #20 #54
#57: NAp #55 #56
#50: NAp #57 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#54: NAp #52 #53
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#52: NAp #25 #49
#54: NAp #52 #53
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#25: NPrim ==
#52: NAp #25 #49
#54: NAp #52 #53
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#49: NAp #47 #48
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#47: NAp #17 #37
#49: NAp #47 #48
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#17: NPrim -
#47: NAp #17 #37
#49: NAp #47 #48
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NAp #47 #48
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#49: NNum 3
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#52: NAp #25 #49
#54: NAp #52 #53
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#25: NPrim ==
#52: NAp #25 #49
#54: NAp #52 #53
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NAp #52 #53
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#54: NData 1, []
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#55: NAp #20 #54
#57: NAp #55 #56
#50: NAp #57 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#20: NPrim if
#55: NAp #20 #54
#57: NAp #55 #56
#50: NAp #57 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NAp #57 #63
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#50: NInd (NAp #58 #62)
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#63: NAp #58 #62
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#58: NAp #18 #49
#63: NAp #58 #62
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#18: NPrim *
#58: NAp #18 #49
#63: NAp #58 #62
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#62: NAp #1 #61
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#1: NSc fac["n"]
#62: NAp #1 #61
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #1 #61
#63: NAp #58 #62
=============

=== STACK ===
#62: NAp #69 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#69: NAp #67 #68
#62: NAp #69 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#67: NAp #20 #66
#69: NAp #67 #68
#62: NAp #69 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#20: NPrim if
#67: NAp #20 #66
#69: NAp #67 #68
#62: NAp #69 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#66: NAp #64 #65
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#64: NAp #25 #61
#66: NAp #64 #65
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#25: NPrim ==
#64: NAp #25 #61
#66: NAp #64 #65
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#61: NAp #59 #60
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#59: NAp #17 #49
#61: NAp #59 #60
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#17: NPrim -
#59: NAp #17 #49
#61: NAp #59 #60
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NAp #59 #60
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#61: NNum 2
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#64: NAp #25 #61
#66: NAp #64 #65
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#25: NPrim ==
#64: NAp #25 #61
#66: NAp #64 #65
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NAp #64 #65
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#66: NData 1, []
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#67: NAp #20 #66
#69: NAp #67 #68
#62: NAp #69 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#20: NPrim if
#67: NAp #20 #66
#69: NAp #67 #68
#62: NAp #69 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NAp #69 #75
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#62: NInd (NAp #70 #74)
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#75: NAp #70 #74
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#70: NAp #18 #61
#75: NAp #70 #74
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#18: NPrim *
#70: NAp #18 #61
#75: NAp #70 #74
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#74: NAp #1 #73
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#1: NSc fac["n"]
#74: NAp #1 #73
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #1 #73
#75: NAp #70 #74
=============

=== STACK ===
#74: NAp #81 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#81: NAp #79 #80
#74: NAp #81 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#79: NAp #20 #78
#81: NAp #79 #80
#74: NAp #81 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#20: NPrim if
#79: NAp #20 #78
#81: NAp #79 #80
#74: NAp #81 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#78: NAp #76 #77
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#76: NAp #25 #73
#78: NAp #76 #77
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#25: NPrim ==
#76: NAp #25 #73
#78: NAp #76 #77
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#73: NAp #71 #72
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#71: NAp #17 #61
#73: NAp #71 #72
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#17: NPrim -
#71: NAp #17 #61
#73: NAp #71 #72
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NAp #71 #72
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#73: NNum 1
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#76: NAp #25 #73
#78: NAp #76 #77
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#25: NPrim ==
#76: NAp #25 #73
#78: NAp #76 #77
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NAp #76 #77
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#78: NData 1, []
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#79: NAp #20 #78
#81: NAp #79 #80
#74: NAp #81 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#20: NPrim if
#79: NAp #20 #78
#81: NAp #79 #80
#74: NAp #81 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NAp #81 #87
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#74: NInd (NAp #82 #86)
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#87: NAp #82 #86
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#82: NAp #18 #73
#87: NAp #82 #86
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#18: NPrim *
#82: NAp #18 #73
#87: NAp #82 #86
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#86: NAp #1 #85
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#1: NSc fac["n"]
#86: NAp #1 #85
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #1 #85
#87: NAp #82 #86
=============

=== STACK ===
#86: NAp #93 #99
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#93: NAp #91 #92
#86: NAp #93 #99
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#91: NAp #20 #90
#93: NAp #91 #92
#86: NAp #93 #99
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#20: NPrim if
#91: NAp #20 #90
#93: NAp #91 #92
#86: NAp #93 #99
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#90: NAp #88 #89
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#88: NAp #25 #85
#90: NAp #88 #89
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#25: NPrim ==
#88: NAp #25 #85
#90: NAp #88 #89
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#85: NAp #83 #84
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#83: NAp #17 #73
#85: NAp #83 #84
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#17: NPrim -
#83: NAp #17 #73
#85: NAp #83 #84
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NAp #83 #84
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#85: NNum 0
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#88: NAp #25 #85
#90: NAp #88 #89
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#25: NPrim ==
#88: NAp #25 #85
#90: NAp #88 #89
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NAp #88 #89
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#90: NData 2, []
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#91: NAp #20 #90
#93: NAp #91 #92
#86: NAp #93 #99
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#20: NPrim if
#91: NAp #20 #90
#93: NAp #91 #92
#86: NAp #93 #99
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NAp #93 #99
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#86: NInd (NNum 1)
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#92: NNum 1
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#87: NAp #82 #86
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #86)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NAp #82 #86
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#87: NAp #82 #92
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #92)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NAp #82 #92
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#82: NAp #18 #73
#87: NAp #82 #92
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #92)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NAp #82 #92
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#18: NPrim *
#82: NAp #18 #73
#87: NAp #82 #92
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NAp #82 #92)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NAp #82 #92
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#87: NNum 1
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#75: NAp #70 #74
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #74)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NAp #70 #74
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#75: NAp #70 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #87)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NAp #70 #87
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#70: NAp #18 #61
#75: NAp #70 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #87)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NAp #70 #87
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#18: NPrim *
#70: NAp #18 #61
#75: NAp #70 #87
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NAp #70 #87)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NAp #70 #87
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#75: NNum 2
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#63: NAp #58 #62
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #62)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NAp #58 #62
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#63: NAp #58 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #75)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NAp #58 #75
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#58: NAp #18 #49
#63: NAp #58 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #75)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NAp #58 #75
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#18: NPrim *
#58: NAp #18 #49
#63: NAp #58 #75
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NAp #58 #75)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NAp #58 #75
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#63: NNum 6
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#51: NAp #46 #50
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #50)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NAp #46 #50
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#51: NAp #46 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #63)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NAp #46 #63
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#46: NAp #18 #37
#51: NAp #46 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #63)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NAp #46 #63
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#18: NPrim *
#46: NAp #18 #37
#51: NAp #46 #63
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NAp #46 #63)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NAp #46 #63
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#51: NNum 24
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NNum 24)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NNum 24
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#39: NAp #34 #38
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #38)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NNum 24)
#39: NAp #34 #38
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NNum 24
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#39: NAp #34 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #51)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NNum 24)
#39: NAp #34 #51
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NNum 24
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#34: NAp #18 #27
#39: NAp #34 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #51)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NNum 24)
#39: NAp #34 #51
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NNum 24
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#18: NPrim *
#34: NAp #18 #27
#39: NAp #34 #51
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NAp #34 #51)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NNum 24)
#39: NAp #34 #51
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NNum 24
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

=== STACK ===
#39: NNum 120
=============

=== HEAP ===
#1: NSc fac["n"]
#2: NInd (NNum 120)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 5
#28: NAp #25 #27
#29: NNum 0
#30: NData 1, []
#31: NAp #20 #30
#32: NNum 1
#33: NAp #31 #32
#34: NAp #18 #27
#35: NAp #17 #27
#36: NNum 1
#37: NNum 4
#38: NInd (NNum 24)
#39: NNum 120
#40: NAp #25 #37
#41: NNum 0
#42: NData 1, []
#43: NAp #20 #42
#44: NNum 1
#45: NAp #43 #44
#46: NAp #18 #37
#47: NAp #17 #37
#48: NNum 1
#49: NNum 3
#50: NInd (NNum 6)
#51: NNum 24
#52: NAp #25 #49
#53: NNum 0
#54: NData 1, []
#55: NAp #20 #54
#56: NNum 1
#57: NAp #55 #56
#58: NAp #18 #49
#59: NAp #17 #49
#60: NNum 1
#61: NNum 2
#62: NInd (NNum 2)
#63: NNum 6
#64: NAp #25 #61
#65: NNum 0
#66: NData 1, []
#67: NAp #20 #66
#68: NNum 1
#69: NAp #67 #68
#70: NAp #18 #61
#71: NAp #17 #61
#72: NNum 1
#73: NNum 1
#74: NInd (NNum 1)
#75: NNum 2
#76: NAp #25 #73
#77: NNum 0
#78: NData 1, []
#79: NAp #20 #78
#80: NNum 1
#81: NAp #79 #80
#82: NAp #18 #73
#83: NAp #17 #73
#84: NNum 1
#85: NNum 0
#86: NInd (NNum 1)
#87: NNum 1
#88: NAp #25 #85
#89: NNum 0
#90: NData 2, []
#91: NAp #20 #90
#92: NNum 1
#93: NAp #91 #92
#94: NAp #18 #85
#95: NAp #17 #85
#96: NNum 1
#97: NAp #95 #96
#98: NAp #1 #97
#99: NAp #94 #98
=============

======= STATS =========
Total number of steps: 149
Total number of reductions: 45
Total number of supercombinator reductions: 7
Total number of primitive reductions: 38
Total number of heap allocations: 99
Total number of heap updates: 34
Maximum stack depth: 4
=======================
=== RES ===
NNum 120
===========