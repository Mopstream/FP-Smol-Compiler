=== STACK ===
#2: NSc main[]
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NSc main[]
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
=============

=== STACK ===
#2: NAp #28 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #28 #29
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
=============

=== STACK ===
#28: NAp #1 #27
#2: NAp #28 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #28 #29
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
=============

=== STACK ===
#1: NSc gcd["a","b"]
#28: NAp #1 #27
#2: NAp #28 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #28 #29
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
=============

=== STACK ===
#2: NAp #33 #44
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NAp #30 #29
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#33: NAp #32 #27
#2: NAp #33 #44
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NAp #30 #29
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#32: NAp #20 #31
#33: NAp #32 #27
#2: NAp #33 #44
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NAp #30 #29
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#20: NPrim if
#32: NAp #20 #31
#33: NAp #32 #27
#2: NAp #33 #44
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NAp #30 #29
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#31: NAp #30 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NAp #30 #29
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#30: NAp #25 #27
#31: NAp #30 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NAp #30 #29
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#25: NPrim ==
#30: NAp #25 #27
#31: NAp #30 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NAp #30 #29
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#31: NData 1, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#32: NAp #20 #31
#33: NAp #32 #27
#2: NAp #33 #44
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#20: NPrim if
#32: NAp #20 #31
#33: NAp #32 #27
#2: NAp #33 #44
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NAp #33 #44
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#2: NInd (NAp #39 #43)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#44: NAp #39 #43
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#39: NAp #36 #38
#44: NAp #39 #43
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#36: NAp #20 #35
#39: NAp #36 #38
#44: NAp #39 #43
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#20: NPrim if
#36: NAp #20 #35
#39: NAp #36 #38
#44: NAp #39 #43
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#35: NAp #34 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#34: NAp #23 #27
#35: NAp #34 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#23: NPrim <
#34: NAp #23 #27
#35: NAp #34 #29
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NAp #34 #29
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#35: NData 2, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#36: NAp #20 #35
#39: NAp #36 #38
#44: NAp #39 #43
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#20: NPrim if
#36: NAp #20 #35
#39: NAp #36 #38
#44: NAp #39 #43
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NAp #39 #43)
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NAp #39 #43
=============

=== STACK ===
#44: NInd (NAp #37 #27)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #37 #27))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #37 #27)
=============

=== STACK ===
#38: NAp #37 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #37 #27))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #37 #27)
=============

=== STACK ===
#37: NAp #1 #29
#38: NAp #37 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #37 #27))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #37 #27)
=============

=== STACK ===
#1: NSc gcd["a","b"]
#37: NAp #1 #29
#38: NAp #37 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #37 #27))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #37 #27
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #37 #27)
=============

=== STACK ===
#38: NAp #48 #59
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NAp #45 #27
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#48: NAp #47 #29
#38: NAp #48 #59
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NAp #45 #27
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#47: NAp #20 #46
#48: NAp #47 #29
#38: NAp #48 #59
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NAp #45 #27
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#20: NPrim if
#47: NAp #20 #46
#48: NAp #47 #29
#38: NAp #48 #59
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NAp #45 #27
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#46: NAp #45 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NAp #45 #27
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#45: NAp #25 #29
#46: NAp #45 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NAp #45 #27
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#25: NPrim ==
#45: NAp #25 #29
#46: NAp #45 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NAp #45 #27
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#46: NData 1, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#47: NAp #20 #46
#48: NAp #47 #29
#38: NAp #48 #59
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#20: NPrim if
#47: NAp #20 #46
#48: NAp #47 #29
#38: NAp #48 #59
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NAp #48 #59))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NAp #48 #59
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NAp #48 #59)
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#38: NInd (NAp #54 #58)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#59: NAp #54 #58
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#54: NAp #51 #53
#59: NAp #54 #58
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#51: NAp #20 #50
#54: NAp #51 #53
#59: NAp #54 #58
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#20: NPrim if
#51: NAp #20 #50
#54: NAp #51 #53
#59: NAp #54 #58
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#50: NAp #49 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#49: NAp #23 #29
#50: NAp #49 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#23: NPrim <
#49: NAp #23 #29
#50: NAp #49 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NAp #49 #27
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#50: NData 1, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#51: NAp #20 #50
#54: NAp #51 #53
#59: NAp #54 #58
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#20: NPrim if
#51: NAp #20 #50
#54: NAp #51 #53
#59: NAp #54 #58
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NAp #54 #58)))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NAp #54 #58)
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NAp #54 #58))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NAp #54 #58
=============

=== STACK ===
#59: NInd (NAp #55 #57)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #55 #57))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #55 #57))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #55 #57)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NInd (NAp #55 #57)
=============

=== STACK ===
#58: NAp #55 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #55 #57))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #55 #57))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #55 #57)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NInd (NAp #55 #57)
=============

=== STACK ===
#55: NAp #1 #27
#58: NAp #55 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #55 #57))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #55 #57))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #55 #57)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NInd (NAp #55 #57)
=============

=== STACK ===
#1: NSc gcd["a","b"]
#55: NAp #1 #27
#58: NAp #55 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #55 #57))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #55 #57))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #55 #57)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #55 #57
#59: NInd (NAp #55 #57)
=============

=== STACK ===
#58: NAp #63 #74
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#63: NAp #62 #27
#58: NAp #63 #74
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#62: NAp #20 #61
#63: NAp #62 #27
#58: NAp #63 #74
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#20: NPrim if
#62: NAp #20 #61
#63: NAp #62 #27
#58: NAp #63 #74
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#61: NAp #60 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#60: NAp #25 #27
#61: NAp #60 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#25: NPrim ==
#60: NAp #25 #27
#61: NAp #60 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#57: NAp #56 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#56: NAp #17 #29
#57: NAp #56 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#17: NPrim -
#56: NAp #17 #29
#57: NAp #56 #27
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NAp #56 #27
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#57: NNum 4
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#61: NAp #60 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#60: NAp #25 #27
#61: NAp #60 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#25: NPrim ==
#60: NAp #25 #27
#61: NAp #60 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NAp #60 #57
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#61: NData 1, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#62: NAp #20 #61
#63: NAp #62 #27
#58: NAp #63 #74
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#20: NPrim if
#62: NAp #20 #61
#63: NAp #62 #27
#58: NAp #63 #74
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NAp #63 #74))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NAp #63 #74))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NAp #63 #74)))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NAp #63 #74
#59: NInd (NAp #63 #74)
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#58: NInd (NAp #69 #73)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#74: NAp #69 #73
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#69: NAp #66 #68
#74: NAp #69 #73
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#66: NAp #20 #65
#69: NAp #66 #68
#74: NAp #69 #73
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#20: NPrim if
#66: NAp #20 #65
#69: NAp #66 #68
#74: NAp #69 #73
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#65: NAp #64 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#64: NAp #23 #27
#65: NAp #64 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#23: NPrim <
#64: NAp #23 #27
#65: NAp #64 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NAp #64 #57
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#65: NData 1, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#66: NAp #20 #65
#69: NAp #66 #68
#74: NAp #69 #73
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#20: NPrim if
#66: NAp #20 #65
#69: NAp #66 #68
#74: NAp #69 #73
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NAp #69 #73)))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NAp #69 #73)))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NAp #69 #73))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NAp #69 #73)
#59: NInd (NInd (NAp #69 #73))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NAp #69 #73
=============

=== STACK ===
#74: NInd (NAp #70 #72)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #70 #72))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #70 #72))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #70 #72)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #70 #72))
#59: NInd (NInd (NInd (NAp #70 #72)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NInd (NAp #70 #72)
=============

=== STACK ===
#73: NAp #70 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #70 #72))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #70 #72))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #70 #72)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #70 #72))
#59: NInd (NInd (NInd (NAp #70 #72)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NInd (NAp #70 #72)
=============

=== STACK ===
#70: NAp #1 #57
#73: NAp #70 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #70 #72))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #70 #72))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #70 #72)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #70 #72))
#59: NInd (NInd (NInd (NAp #70 #72)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NInd (NAp #70 #72)
=============

=== STACK ===
#1: NSc gcd["a","b"]
#70: NAp #1 #57
#73: NAp #70 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #70 #72))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #70 #72))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #70 #72)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #70 #72))
#59: NInd (NInd (NInd (NAp #70 #72)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #70 #72
#74: NInd (NAp #70 #72)
=============

=== STACK ===
#73: NAp #78 #89
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#78: NAp #77 #57
#73: NAp #78 #89
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#77: NAp #20 #76
#78: NAp #77 #57
#73: NAp #78 #89
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#20: NPrim if
#77: NAp #20 #76
#78: NAp #77 #57
#73: NAp #78 #89
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#76: NAp #75 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#75: NAp #25 #57
#76: NAp #75 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#25: NPrim ==
#75: NAp #25 #57
#76: NAp #75 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#72: NAp #71 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#71: NAp #17 #27
#72: NAp #71 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#17: NPrim -
#71: NAp #17 #27
#72: NAp #71 #57
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NAp #71 #57
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#72: NNum 2
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#76: NAp #75 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#75: NAp #25 #57
#76: NAp #75 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#25: NPrim ==
#75: NAp #25 #57
#76: NAp #75 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NAp #75 #72
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#76: NData 1, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#77: NAp #20 #76
#78: NAp #77 #57
#73: NAp #78 #89
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#20: NPrim if
#77: NAp #20 #76
#78: NAp #77 #57
#73: NAp #78 #89
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NAp #78 #89))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NAp #78 #89))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NAp #78 #89)))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NAp #78 #89))
#59: NInd (NInd (NInd (NAp #78 #89)))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NAp #78 #89
#74: NInd (NAp #78 #89)
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#73: NInd (NAp #84 #88)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#89: NAp #84 #88
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#84: NAp #81 #83
#89: NAp #84 #88
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#81: NAp #20 #80
#84: NAp #81 #83
#89: NAp #84 #88
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#20: NPrim if
#81: NAp #20 #80
#84: NAp #81 #83
#89: NAp #84 #88
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#80: NAp #79 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#79: NAp #23 #57
#80: NAp #79 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#23: NPrim <
#79: NAp #23 #57
#80: NAp #79 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NAp #79 #72
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#80: NData 1, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#81: NAp #20 #80
#84: NAp #81 #83
#89: NAp #84 #88
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#20: NPrim if
#81: NAp #20 #80
#84: NAp #81 #83
#89: NAp #84 #88
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NAp #84 #88)))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NAp #84 #88))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NAp #84 #88)))
#59: NInd (NInd (NInd (NInd (NAp #84 #88))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NAp #84 #88)
#74: NInd (NInd (NAp #84 #88))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NAp #84 #88
=============

=== STACK ===
#89: NInd (NAp #85 #87)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #85 #87))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #85 #87))
#74: NInd (NInd (NInd (NAp #85 #87)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NInd (NAp #85 #87)
=============

=== STACK ===
#88: NAp #85 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #85 #87))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #85 #87))
#74: NInd (NInd (NInd (NAp #85 #87)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NInd (NAp #85 #87)
=============

=== STACK ===
#85: NAp #1 #72
#88: NAp #85 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #85 #87))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #85 #87))
#74: NInd (NInd (NInd (NAp #85 #87)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NInd (NAp #85 #87)
=============

=== STACK ===
#1: NSc gcd["a","b"]
#85: NAp #1 #72
#88: NAp #85 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #85 #87))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #85 #87)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #85 #87))
#74: NInd (NInd (NInd (NAp #85 #87)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #85 #87
#89: NInd (NAp #85 #87)
=============

=== STACK ===
#88: NAp #93 #104
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#93: NAp #92 #72
#88: NAp #93 #104
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#92: NAp #20 #91
#93: NAp #92 #72
#88: NAp #93 #104
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#20: NPrim if
#92: NAp #20 #91
#93: NAp #92 #72
#88: NAp #93 #104
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#91: NAp #90 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#90: NAp #25 #72
#91: NAp #90 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#25: NPrim ==
#90: NAp #25 #72
#91: NAp #90 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#87: NAp #86 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#86: NAp #17 #57
#87: NAp #86 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#17: NPrim -
#86: NAp #17 #57
#87: NAp #86 #72
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NAp #86 #72
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#87: NNum 2
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#91: NAp #90 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#90: NAp #25 #72
#91: NAp #90 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#25: NPrim ==
#90: NAp #25 #72
#91: NAp #90 #87
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NAp #90 #87
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#91: NData 2, []
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NData 2, []
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#92: NAp #20 #91
#93: NAp #92 #72
#88: NAp #93 #104
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NData 2, []
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#20: NPrim if
#92: NAp #20 #91
#93: NAp #92 #72
#88: NAp #93 #104
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NAp #93 #104))))
#59: NInd (NInd (NInd (NInd (NInd (NAp #93 #104)))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NAp #93 #104))
#74: NInd (NInd (NInd (NAp #93 #104)))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NAp #93 #104
#89: NInd (NAp #93 #104)
#90: NAp #25 #72
#91: NData 2, []
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#88: NInd (NNum 2)
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NNum 2)))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NNum 2)))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NNum 2))))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NInd (NNum 2)))))
#59: NInd (NInd (NInd (NInd (NInd (NInd (NNum 2))))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NInd (NNum 2)))
#74: NInd (NInd (NInd (NInd (NNum 2))))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NInd (NNum 2)
#89: NInd (NInd (NNum 2))
#90: NAp #25 #72
#91: NData 2, []
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

=== STACK ===
#72: NNum 2
=============

=== HEAP ===
#1: NSc gcd["a","b"]
#2: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NNum 2)))))))))
#3: NSc I["x"]
#4: NSc K["x","y"]
#5: NSc K1["x","y"]
#6: NSc S["f","g","x"]
#7: NSc compose["f","g","x"]
#8: NSc twice["f"]
#9: NSc False[]
#10: NSc True[]
#11: NSc and["x","y"]
#12: NSc or["x","y"]
#13: NSc xor["x","y"]
#14: NSc not["y"]
#15: NPrim negate
#16: NPrim +
#17: NPrim -
#18: NPrim *
#19: NPrim /
#20: NPrim if
#21: NPrim >
#22: NPrim >=
#23: NPrim <
#24: NPrim <=
#25: NPrim ==
#26: NPrim ~=
#27: NNum 6
#28: NAp #1 #27
#29: NNum 10
#30: NAp #25 #27
#31: NData 1, []
#32: NAp #20 #31
#33: NAp #32 #27
#34: NAp #23 #27
#35: NData 2, []
#36: NAp #20 #35
#37: NAp #1 #29
#38: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NNum 2)))))))
#39: NAp #36 #38
#40: NAp #1 #29
#41: NAp #17 #27
#42: NAp #41 #29
#43: NAp #40 #42
#44: NInd (NInd (NInd (NInd (NInd (NInd (NInd (NInd (NNum 2))))))))
#45: NAp #25 #29
#46: NData 1, []
#47: NAp #20 #46
#48: NAp #47 #29
#49: NAp #23 #29
#50: NData 1, []
#51: NAp #20 #50
#52: NAp #1 #27
#53: NAp #52 #29
#54: NAp #51 #53
#55: NAp #1 #27
#56: NAp #17 #29
#57: NNum 4
#58: NInd (NInd (NInd (NInd (NInd (NNum 2)))))
#59: NInd (NInd (NInd (NInd (NInd (NInd (NNum 2))))))
#60: NAp #25 #27
#61: NData 1, []
#62: NAp #20 #61
#63: NAp #62 #27
#64: NAp #23 #27
#65: NData 1, []
#66: NAp #20 #65
#67: NAp #1 #57
#68: NAp #67 #27
#69: NAp #66 #68
#70: NAp #1 #57
#71: NAp #17 #27
#72: NNum 2
#73: NInd (NInd (NInd (NNum 2)))
#74: NInd (NInd (NInd (NInd (NNum 2))))
#75: NAp #25 #57
#76: NData 1, []
#77: NAp #20 #76
#78: NAp #77 #57
#79: NAp #23 #57
#80: NData 1, []
#81: NAp #20 #80
#82: NAp #1 #72
#83: NAp #82 #57
#84: NAp #81 #83
#85: NAp #1 #72
#86: NAp #17 #57
#87: NNum 2
#88: NInd (NNum 2)
#89: NInd (NInd (NNum 2))
#90: NAp #25 #72
#91: NData 2, []
#92: NAp #20 #91
#93: NAp #92 #72
#94: NAp #23 #72
#95: NAp #94 #87
#96: NAp #20 #95
#97: NAp #1 #87
#98: NAp #97 #72
#99: NAp #96 #98
#100: NAp #1 #87
#101: NAp #17 #72
#102: NAp #101 #87
#103: NAp #100 #102
#104: NAp #99 #103
=============

======= STATS =========
Total number of steps: 136
Total number of reductions: 39
Total number of supercombinator reductions: 6
Total number of primitive reductions: 33
Total number of heap allocations: 104
Total number of heap updates: 27
Maximum stack depth: 4
=======================
=== RES ===
NNum 2
===========